* Data & Data Structures:
** symbols used

use character literals

** Coordinates:

column increases to the right.
row increases down.

#+BEGIN_SRC text
 0 1 2 3   -->   col
0
1
2
3

|
v

row
#+END_SRC

{:row 0 :col 1} < {:row 1 :col 0}

The above is READING-ORDER.

** The tracks:

   The following:

#+BEGIN_SRC clojure
  (def sp "One space character. This makes examples in code more readable." \space)
  (def tracks
    [[\/ \- \\]
     [\| sp \|]
     [\| sp \|]])
#+END_SRC

describes the following visual tracks:

#+BEGIN_SRC text
 012
0/-\
1| v
2| |
#+END_SRC

** carts:

#+BEGIN_SRC clojure
  (def carts
    [{:col 3 :row 2 :dir \> :next-turn :left}
     {:col 2 :row 1 :dir \v :next-turn :straight}])
#+END_SRC

* Functions breakdown

** cart-next-state - Fenton/Aaron
:in: a cart, {:col 3 :row 2 :dir \> :next-turn :left}
:in: tracks, (see above)
:processing: based on the carts current location, direction, next
turn, and the track(s) it is on, calculate its next
coord/dir/next-turn.
:out: {:col 4 :row 1 :dir :right :next-turn :right}

** get-track-segment
:in: tracks
:in: a coordinate
:out: what the track piece under that coordinate is.  One of:
#{\- \| \\ \/ \+}

** parse-input
:in: a file where each line is composed of the symbols: | - / \ + < > ^ v.
:out: a data structure like:

#+BEGIN_SRC clojure
  (def tracks-n-carts
    [[\/ \- \\]
     [\| sp \v]
     [\| sp \|]])
#+END_SRC


** make-tracks
:in: tracks-n-carts (see above)
:processing: We need to separate the tracks from the carts because the
carts obscure what is under them for example:

#+BEGIN_SRC text
 0123
0/->-
1|
#+END_SRC

Needs to be converted to just tracks, i.e. with the cart effectively
not present:

#+BEGIN_SRC text
 0123
0/---
1|
#+END_SRC

or as a data structure:

#+BEGIN_SRC clojure
  (def tracks
    [[\/ \- \- \-]
     [\| sp sp sp]])
#+END_SRC
:out: the tracks data structure

** make-carts
:in: tracks-n-carts
:processing: extract list of all carts & directions.
:out: carts

** any-collisions?
:in: carts
check to see if any of the carts now occupy the same coordinates

** sort-carts
:in: carts vector
:out: carts sorted by position {:row 0 :column 1} < {:row 1 :col 0}


* Bonus Functions

It can be nice to visualize results, so create a function that prints
out the tracks and carts for display.

** print-tracks-n-carts
:in: tracks
:in: carts
:processing: create a printable string that has :max-columns width, and
:max-rows height so that when you print it in the repl, it looks nice.
:out: a nicely (in the repl) printing string that represents the
tracks and carts, eg:
"\/-\n| \n" which when displayed in repl looks like:

: /-
: |

etc...

* Tests

some testdata can be found at ~test/aoc2018_13~

file: small-data-1.1.txt

after one tick of the game should look like state in

file: small-data-1.2.txt

after another tick:

file: small-data-1.3.txt
